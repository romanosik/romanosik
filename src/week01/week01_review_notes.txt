
Week 01 review

Introduction to computers and programming
Day01 - Intro To Programming
_______________________________________________________________
introduction
overview of programming
java
IntelliJ
main method
print statements
__________________________________________________________________

Shortcuts

	screenshot:
		mac: command + shift + 5
		windows: windows key + shift + s

	copy: command/control + c
	paste: command/control + v
	cut: command/control + x
	undo: command/control + z
	save: command/control + s

	main method: main
	print statement: sout
	print for variable: soutv

	comments
		select line/s that you want to comment then use the shortcut
			windows: control + /
			mac: command + /

	formatting the code
		windows: ctrl + alt + L
		mac: command + option + L

	How to rename something
		right click -> Refactor -> rename
__________________________________________________________________

Introduction

This program: sublime text. We will use it for notes

Schedule
	Watch recordings during week
	Sunday: Live Review

	We will talk about in more details when they get closer
		week 4:
			Wednesday: Office Hours
	10 AM - 5 PM
	Live Class Flow [3 hour blocks]:
		45-50 min class
		10 - 15 min break
		45-50 min class
		10 - 15 min break
		45-50 min class
	1 PM - 2 PM is Long break

Zoom raw recordings + Edited video on LMS

Discord channels

	announcements: Important announcements will be shared here

	* class-recordings: Recoding related announcements

	general: off topic conversations

	class-chat: live chat during class. Keep it on topic. This is for interaction during live classes. I will give time to ask questions before going to the next topic. If you ask a question outside of the time I may skip it. Questions should be asked in questions_anwsers channel

	questions-answers: during live classes you can ask any question and George will help. Especially important if something is not working on your side, not question about topic

	code: where the code from live classes will be shared
		-> All code will always be on GitHub too

	java-only: where I will share things so they don't get lost in the chats

What should you do if you have a questions: google/chatGPT -> mentor/group channel -> question-answer channel
	also depends on the time you are asking * review the orientation slides

GitHub: this is where the code and notes will be shared

support@cydeo.com
___________________________________________________________

programming introduction

	binary:
		language the computer understands
		build of 0s and 1s

	programming language: more understandable to us -> high level
		closer to English than binary

	To go from a high level to a low level (machine understandable) we can compile/translate

	Java Program -> compiled into ByteCode -> Interpreted to Binary(machine code) -> Executed

	Python program -> Interpreted to Binary(machine code) -> Executed

	https://cdn.cs50.net/2016/x/psets/0/pset0/bulbs.html
	https://www.asciitable.com/

	Where do programmers write code?
		any text file

		IDE: integrated development environment
			-> a tool to help us write code
			we will use IntelliJ
			For java -> Eclipse, Netbeans, VSCode


	File: stores data
		extension
			.txt
			.docx
			.jpg
			.csv
			.pdf
			.mp3
			.java
			.class

Mac: Terminal
Windows: Powershell
pwd -> print working directory
ls -> list all files and folders
cd -> change directory
__________________________________________________________________

java

	java programming can be used for many purposes
	We are learning java for testing. Test Automation

	We write java code -> it will get translated and converted to binary -> then computer can understand

	How does java work:

		write code 		-> 	compile 	-> bytecode -> interpreted to binary(0 and 1)
		(.java)				(javac)		   (.class)

		bytecode runs in the jvm. The jvm translates(interpreted) to machine level(0 and 1s)

	------------------------------------------------------------------------

	What is the different between JDK, JRE, JVM

		JDK: Java development kit
			allows you to write java code
			contains the JRE and JVM, and compiler

		JRE: Java runtime environment
			contains JVM, JRE libraries(files), which allows java code to be run

		JVM: Java virtual machine
			runs the java code
			interprets the bytecode to binary

java/JDK 17 (LTS) -> Long term support
java 8 -> JDK 1.8
_______________________________________________________________

Drag and drop programming:

https://scratch.mit.edu/projects/editor/?tutorial=getStarted

Universal programming concepts:
	- sequence -> program executes step by step/top to buttom sequence

	- conditions -> if condition is yes(true) then do this otherwise do that

	- repetitions -> program repeats some code for number of times or as long as some condition is Yes/True. We use loops in java for repetitions

	- data -> when writing programs, we always work with different type of data like numbers, characters etc. We can use variables to store data

Any complex program consists of combination of above concepts.
_______________________________________________________________
IntelliJ

	Project name: java-live-review

	By default all projects are made in a folder called IdeaProjects
		this folder is under your user

    screenshot:
		mac: command + shift + 5
		windows: windows key + shift + s

	copy: command/control + c
	paste: command/control + v

	------------------------------------------------------------------------
	- Creating an Intellij Project
		Open Intellij
		Click create a New Project
		Enter the Project Name
		Check the location for IdeaProjects otherwise you can change it
		Make sure Java is selected
		Build System: IntelliJ
		Make sure your JDK version is selected
		Click create
	------------------------------------------------------------------------

	IntelliJ project components

		project name: Project folder
		src: source folder
		package: folder
		class: java file
		console: window that shows your outputs
		out: folder that has the bytecode/compiled code

		How to run the program: click the green arrow next to main method, right click -> run
		IntelliJ saves automatically

	------------------------------------------------------------------------

	Settings to change

		settings:
			windows:
				file -> settings
			mac:
				IntelliJ IDEA -> preference/settings
		Font:
			preference window -> Editor -> Font

		Zoom in and out
			In settings/preferences
			Editor -> General
			Mouse Control: Select Change Font size with command + wheel in

		Set Compiler in IntelliJ:
			preference window -> Build, execution, deployment -> Compiler ->
		Java Compiler -> set the "Byte Code Version" to 17

	Optional: rainbow brackets: this plugin will help you better see brackets in the code
		settings -> plugins -> rainbow brackets

__________________________________________________________________

java file

	Class: PrintName
		no space

	Java is not space sensitive  (in the code)
	Java is case sensitive (lowercase and uppercase matter)
	A java file will have a class. The class by itself does not run.

	Syntax: grammatical rules for the language
__________________________________________________________________

main method

	public static void main(String[] args) {

	}

	-> main method: allows you to run code

	-> When do you make main method: in every class that you want to run

	The code inside main method will run line by line, top to bottom, left to right.

__________________________________________________________________

print statements

	System.out.println(); sout
	-> lets you output something to console

	Difference between print and println
		System.out.println() -> output to the console and the break the line
	System.out.println(); by itself will add empty new line
__________________________________________________________________



In week01 package, add a class PrintingNumbers
Add main method
Write code to print following:
0
1
2

3
4
5

====================

In week01 package, add new class PrintSquare
Add main method
Write print statement to show square:

# # # #
#	  #
# # # #
====================

In week01 package, add new class PrintTriangle
Add main method
Write print statement to show triangle:
    *
   * *
  *   *
 *******

====================

In week01 package, add new class PrintRectangle
Add main method
Write print statement to show Rectangle:
 ________
|        |
|	     |
|________|
